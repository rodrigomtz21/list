{"version":3,"sources":["components/DeviceCard.js","App.js","index.js"],"names":["DeviceCard","state","amount","show","showAdd","devices","selectedDevice","editName","createId","createName","handleClose","setState","handleCloseAdd","handleChange","e","target","value","handleChangeId","handleChangeName","handleUpdate","name","handleUpdateAdd","items","push","handleRemove","device","indexItem","splice","handleShow","item","index","handleShowAdd","className","Accordion","defaultActiveKey","this","map","Card","id","Header","Toggle","as","Button","variant","eventKey","nameGroup","onClick","Fragment","Collapse","Body","Modal","onHide","closeButton","Title","Form","Group","controlId","Label","Control","type","defaultValue","onChange","Text","Footer","React","Component","App","root","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.615119b4.chunk.js","sourcesContent":["import React from 'react';\nimport './DeviceCard.css';\nimport devices from './data/devices.json';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nclass DeviceCard extends React.Component {\n    state = {\n        amount: 0,\n        show: false,\n        showAdd: false,\n        devices: devices,\n        selectedDevice: {},\n        editName: \"\",\n        createId: \"\",\n        createName: \"\"\n    }\n\n    handleClose = () => {\n        this.setState({\n            show: false\n        });\n    };\n\n    handleCloseAdd = () => {\n        this.setState({\n            showAdd: false\n        });\n    };\n\n    handleChange = (e) =>{ \n        this.setState({editName: e.target.value});\n    };\n\n    handleChangeId = (e) =>{ \n        this.setState({createId: e.target.value});\n    };\n\n    handleChangeName = (e) =>{ \n        this.setState({createName: e.target.value});\n    };\n\n    handleUpdate = () => {\n        let selectedItem = this.state.selectedDevice;\n        selectedItem.name = this.state.editName;\n        this.setState({\n            show: false\n        });\n    };\n\n    handleUpdateAdd = () => {\n        let selectedDevice = this.state.selectedDevice;\n        selectedDevice.items.push({\n            \"id\": this.state.createName,\n            \"name\": this.state.createName   \n        });\n        this.setState({\n            showAdd: false,\n            createId: \"\",\n            createName: \"\"\n        });\n    };\n\n    handleRemove = (device, indexItem) => {\n        device.items.splice(indexItem,1);\n        this.setState({});\n        \n    };\n\n    handleShow = (item, index) => {\n        this.setState({\n            show: true,\n            editName: item.name,\n            selectedDevice: item\n        });\n        \n    };\n\n    handleShowAdd = (device) => {\n        this.setState({\n            showAdd: true,\n            selectedDevice: device\n        });\n        \n    };\n\n    \n\n    render() {\n        return (\n            <div className=\"content-accordion\">\n            \n                <Accordion defaultActiveKey={ 0 }>\n                    {\n                        this.state.devices.map((device, index) => {\n                            return (\n                                <Card  id={ index }>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey={ index }>\n                                            { device.nameGroup }\n                                        </Accordion.Toggle>\n                                        <Button variant=\"light\"\n                                            onClick={() => this.handleShowAdd(device)}>\n                                            Add Item\n                                        </Button>\n                                    </Card.Header>\n                                {\n                                    device.items.map((item, indexItem) => {\n                                        return (<React.Fragment>\n                                                    <Accordion.Collapse eventKey={ index }>\n                                                        <Card.Body>\n                                                            <h5> {item.name}</h5>\n                                                            <Button variant=\"outline-primary\"\n                                                                onClick={() => this.handleRemove(device, indexItem)}>\n                                                                Remove\n                                                            </Button>\n                                                            <Button variant=\"outline-primary\"\n                                                                onClick={() => this.handleShow(item, index)}>\n                                                                Edit\n                                                            </Button>\n                                                        </Card.Body>\n                                                    </Accordion.Collapse>\n                                                </React.Fragment>\n                                        )\n                                    })\n                                }\n                                </Card>\n                            )\n                        })\n                    }\n                </Accordion>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                    <Modal.Title>Edit</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    <Form>\n                        <Form.Group controlId=\"formBasicName\">\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control type=\"text\" defaultValue={this.state.editName} onChange={this.handleChange}/>\n                            <Form.Text className=\"text-muted\">\n                            Set the new name.\n                            </Form.Text>\n                        </Form.Group>\n                    </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={this.handleUpdate}>\n                        Save Changes\n                    </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Modal show={this.state.showAdd} onHide={this.handleCloseAdd}>\n                    <Modal.Header closeButton>\n                    <Modal.Title>Edit</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    <Form>\n                        <Form.Group controlId=\"createId\">\n                            <Form.Label>Id</Form.Label>\n                            <Form.Control type=\"text\" defaultValue={this.state.createId} onChange={this.handleChangeId}/>\n                            <Form.Text className=\"text-muted\">\n                            Set the Id.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group controlId=\"createName\">\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control type=\"text\" defaultValue={this.state.createName} onChange={this.handleChangeName}/>\n                            <Form.Text className=\"text-muted\">\n                            Set the name.\n                            </Form.Text>\n                        </Form.Group>\n                    </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.handleCloseAdd}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={this.handleUpdateAdd}>\n                        Save Changes\n                    </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n            \n        )\n    }\n}\n\nexport default DeviceCard;","import React from 'react';\nimport DeviceCard from './components/DeviceCard'\n\nconst App = () => (\n    <div>\n        <DeviceCard />\n    </div>\n);\n\nexport default App;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from'jquery';\nimport Popper from'popper.js';\nimport'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<App/>, root);"],"sourceRoot":""}